// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtobufMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufProMsg {

  /// <summary>Holder for reflection information generated from ProtobufMsg.proto</summary>
  public static partial class ProtobufMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtobufMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtobufMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90b2J1Zk1zZy5wcm90bxIOUHJvdG9idWZQcm9Nc2ci1QIKBlByb01z",
            "ZxIMCgRjb2RlGAEgASgFEgwKBGhlYXQYAiABKAUSDAoEc3BvMhgDIAEoBRIK",
            "CgJwaRgEIAEoBRILCgN2ZWMYBSABKAUSDwoHbWVzc2FnZRgGIAEoCRITCgtH",
            "ZXRTZXJpYWxObxgHIAEoCRITCgtTY2VuZVVJTmFtZRgIIAEoCRIQCghwYXRo",
            "TmFtZRgJIAEoCRIMCgROYW1lGAogASgJEg4KBlRNTmFtZRgLIAEoCRIUCgxt",
            "cDNfbXA0X1NpemUYDCABKAkSEQoJU2Nyb2xsQmFyGA0gASgJEhMKC0dldEVs",
            "ZWN0cmljGA4gASgJEh0KFUdldE5ldHdvcmtFbnZpcm9ubWVudBgPIAEoCRIS",
            "CgpHZXRBdFN0YXRlGBAgASgJEhoKEkdldEFuZHJvaWRWZXJzaW9ucxgRIAEo",
            "CRIQCghEUEhhbmRsZRgSIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufProMsg.ProMsg), global::ProtobufProMsg.ProMsg.Parser, new[]{ "Code", "Heat", "Spo2", "Pi", "Vec", "Message", "GetSerialNo", "SceneUIName", "PathName", "Name", "TMName", "Mp3Mp4Size", "ScrollBar", "GetElectric", "GetNetworkEnvironment", "GetAtState", "GetAndroidVersions", "DPHandle" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProMsg : pb::IMessage<ProMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProMsg> _parser = new pb::MessageParser<ProMsg>(() => new ProMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufProMsg.ProtobufMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProMsg(ProMsg other) : this() {
      code_ = other.code_;
      heat_ = other.heat_;
      spo2_ = other.spo2_;
      pi_ = other.pi_;
      vec_ = other.vec_;
      message_ = other.message_;
      getSerialNo_ = other.getSerialNo_;
      sceneUIName_ = other.sceneUIName_;
      pathName_ = other.pathName_;
      name_ = other.name_;
      tMName_ = other.tMName_;
      mp3Mp4Size_ = other.mp3Mp4Size_;
      scrollBar_ = other.scrollBar_;
      getElectric_ = other.getElectric_;
      getNetworkEnvironment_ = other.getNetworkEnvironment_;
      getAtState_ = other.getAtState_;
      getAndroidVersions_ = other.getAndroidVersions_;
      dPHandle_ = other.dPHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProMsg Clone() {
      return new ProMsg(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    ///枚举操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "heat" field.</summary>
    public const int HeatFieldNumber = 2;
    private int heat_;
    /// <summary>
    ///脉搏速率0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heat {
      get { return heat_; }
      set {
        heat_ = value;
      }
    }

    /// <summary>Field number for the "spo2" field.</summary>
    public const int Spo2FieldNumber = 3;
    private int spo2_;
    /// <summary>
    /// 血氧浓度1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Spo2 {
      get { return spo2_; }
      set {
        spo2_ = value;
      }
    }

    /// <summary>Field number for the "pi" field.</summary>
    public const int PiFieldNumber = 4;
    private int pi_;
    /// <summary>
    /// PI值2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pi {
      get { return pi_; }
      set {
        pi_ = value;
      }
    }

    /// <summary>Field number for the "vec" field.</summary>
    public const int VecFieldNumber = 5;
    private int vec_;
    /// <summary>
    /// 波线图坐标3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vec {
      get { return vec_; }
      set {
        vec_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    /// <summary>
    /// 消息体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GetSerialNo" field.</summary>
    public const int GetSerialNoFieldNumber = 7;
    private string getSerialNo_ = "";
    /// <summary>
    /// 设备序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetSerialNo {
      get { return getSerialNo_; }
      set {
        getSerialNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneUIName" field.</summary>
    public const int SceneUINameFieldNumber = 8;
    private string sceneUIName_ = "";
    /// <summary>
    /// 当前所在的控制名(场景或UI界面)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneUIName {
      get { return sceneUIName_; }
      set {
        sceneUIName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pathName" field.</summary>
    public const int PathNameFieldNumber = 9;
    private string pathName_ = "";
    /// <summary>
    /// 当前播放的资源路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathName {
      get { return pathName_; }
      set {
        pathName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    /// <summary>
    //// &lt;summary>
    /// 当前播放的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TMName" field.</summary>
    public const int TMNameFieldNumber = 11;
    private string tMName_ = "";
    /// <summary>
    /// 脱敏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TMName {
      get { return tMName_; }
      set {
        tMName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mp3_mp4_Size" field.</summary>
    public const int Mp3Mp4SizeFieldNumber = 12;
    private string mp3Mp4Size_ = "";
    /// <summary>
    /// 当前播放的资源进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mp3Mp4Size {
      get { return mp3Mp4Size_; }
      set {
        mp3Mp4Size_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ScrollBar" field.</summary>
    public const int ScrollBarFieldNumber = 13;
    private string scrollBar_ = "";
    /// <summary>
    /// 当前滚动条数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScrollBar {
      get { return scrollBar_; }
      set {
        scrollBar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GetElectric" field.</summary>
    public const int GetElectricFieldNumber = 14;
    private string getElectric_ = "";
    /// <summary>
    /// 设备当前的电量(0-100)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetElectric {
      get { return getElectric_; }
      set {
        getElectric_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GetNetworkEnvironment" field.</summary>
    public const int GetNetworkEnvironmentFieldNumber = 15;
    private string getNetworkEnvironment_ = "";
    /// <summary>
    /// 设备当前的网络环境是否正常(正常-异常)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetNetworkEnvironment {
      get { return getNetworkEnvironment_; }
      set {
        getNetworkEnvironment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GetAtState" field.</summary>
    public const int GetAtStateFieldNumber = 16;
    private string getAtState_ = "";
    /// <summary>
    /// 设备当前的地区(国家)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetAtState {
      get { return getAtState_; }
      set {
        getAtState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GetAndroidVersions" field.</summary>
    public const int GetAndroidVersionsFieldNumber = 17;
    private string getAndroidVersions_ = "";
    /// <summary>
    /// 设备当前的Android版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GetAndroidVersions {
      get { return getAndroidVersions_; }
      set {
        getAndroidVersions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DPHandle" field.</summary>
    public const int DPHandleFieldNumber = 18;
    private int dPHandle_;
    /// <summary>
    ///DP操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DPHandle {
      get { return dPHandle_; }
      set {
        dPHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Heat != other.Heat) return false;
      if (Spo2 != other.Spo2) return false;
      if (Pi != other.Pi) return false;
      if (Vec != other.Vec) return false;
      if (Message != other.Message) return false;
      if (GetSerialNo != other.GetSerialNo) return false;
      if (SceneUIName != other.SceneUIName) return false;
      if (PathName != other.PathName) return false;
      if (Name != other.Name) return false;
      if (TMName != other.TMName) return false;
      if (Mp3Mp4Size != other.Mp3Mp4Size) return false;
      if (ScrollBar != other.ScrollBar) return false;
      if (GetElectric != other.GetElectric) return false;
      if (GetNetworkEnvironment != other.GetNetworkEnvironment) return false;
      if (GetAtState != other.GetAtState) return false;
      if (GetAndroidVersions != other.GetAndroidVersions) return false;
      if (DPHandle != other.DPHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Heat != 0) hash ^= Heat.GetHashCode();
      if (Spo2 != 0) hash ^= Spo2.GetHashCode();
      if (Pi != 0) hash ^= Pi.GetHashCode();
      if (Vec != 0) hash ^= Vec.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (GetSerialNo.Length != 0) hash ^= GetSerialNo.GetHashCode();
      if (SceneUIName.Length != 0) hash ^= SceneUIName.GetHashCode();
      if (PathName.Length != 0) hash ^= PathName.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TMName.Length != 0) hash ^= TMName.GetHashCode();
      if (Mp3Mp4Size.Length != 0) hash ^= Mp3Mp4Size.GetHashCode();
      if (ScrollBar.Length != 0) hash ^= ScrollBar.GetHashCode();
      if (GetElectric.Length != 0) hash ^= GetElectric.GetHashCode();
      if (GetNetworkEnvironment.Length != 0) hash ^= GetNetworkEnvironment.GetHashCode();
      if (GetAtState.Length != 0) hash ^= GetAtState.GetHashCode();
      if (GetAndroidVersions.Length != 0) hash ^= GetAndroidVersions.GetHashCode();
      if (DPHandle != 0) hash ^= DPHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Heat != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Heat);
      }
      if (Spo2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Spo2);
      }
      if (Pi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pi);
      }
      if (Vec != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Vec);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (GetSerialNo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GetSerialNo);
      }
      if (SceneUIName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SceneUIName);
      }
      if (PathName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PathName);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (TMName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TMName);
      }
      if (Mp3Mp4Size.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Mp3Mp4Size);
      }
      if (ScrollBar.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ScrollBar);
      }
      if (GetElectric.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GetElectric);
      }
      if (GetNetworkEnvironment.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(GetNetworkEnvironment);
      }
      if (GetAtState.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(GetAtState);
      }
      if (GetAndroidVersions.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GetAndroidVersions);
      }
      if (DPHandle != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DPHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Heat != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Heat);
      }
      if (Spo2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Spo2);
      }
      if (Pi != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pi);
      }
      if (Vec != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Vec);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (GetSerialNo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GetSerialNo);
      }
      if (SceneUIName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SceneUIName);
      }
      if (PathName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PathName);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (TMName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TMName);
      }
      if (Mp3Mp4Size.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Mp3Mp4Size);
      }
      if (ScrollBar.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ScrollBar);
      }
      if (GetElectric.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(GetElectric);
      }
      if (GetNetworkEnvironment.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(GetNetworkEnvironment);
      }
      if (GetAtState.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(GetAtState);
      }
      if (GetAndroidVersions.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GetAndroidVersions);
      }
      if (DPHandle != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DPHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Heat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heat);
      }
      if (Spo2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spo2);
      }
      if (Pi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pi);
      }
      if (Vec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vec);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (GetSerialNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GetSerialNo);
      }
      if (SceneUIName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneUIName);
      }
      if (PathName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathName);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TMName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TMName);
      }
      if (Mp3Mp4Size.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mp3Mp4Size);
      }
      if (ScrollBar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScrollBar);
      }
      if (GetElectric.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GetElectric);
      }
      if (GetNetworkEnvironment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GetNetworkEnvironment);
      }
      if (GetAtState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GetAtState);
      }
      if (GetAndroidVersions.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GetAndroidVersions);
      }
      if (DPHandle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DPHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProMsg other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Heat != 0) {
        Heat = other.Heat;
      }
      if (other.Spo2 != 0) {
        Spo2 = other.Spo2;
      }
      if (other.Pi != 0) {
        Pi = other.Pi;
      }
      if (other.Vec != 0) {
        Vec = other.Vec;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.GetSerialNo.Length != 0) {
        GetSerialNo = other.GetSerialNo;
      }
      if (other.SceneUIName.Length != 0) {
        SceneUIName = other.SceneUIName;
      }
      if (other.PathName.Length != 0) {
        PathName = other.PathName;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TMName.Length != 0) {
        TMName = other.TMName;
      }
      if (other.Mp3Mp4Size.Length != 0) {
        Mp3Mp4Size = other.Mp3Mp4Size;
      }
      if (other.ScrollBar.Length != 0) {
        ScrollBar = other.ScrollBar;
      }
      if (other.GetElectric.Length != 0) {
        GetElectric = other.GetElectric;
      }
      if (other.GetNetworkEnvironment.Length != 0) {
        GetNetworkEnvironment = other.GetNetworkEnvironment;
      }
      if (other.GetAtState.Length != 0) {
        GetAtState = other.GetAtState;
      }
      if (other.GetAndroidVersions.Length != 0) {
        GetAndroidVersions = other.GetAndroidVersions;
      }
      if (other.DPHandle != 0) {
        DPHandle = other.DPHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Heat = input.ReadInt32();
            break;
          }
          case 24: {
            Spo2 = input.ReadInt32();
            break;
          }
          case 32: {
            Pi = input.ReadInt32();
            break;
          }
          case 40: {
            Vec = input.ReadInt32();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            GetSerialNo = input.ReadString();
            break;
          }
          case 66: {
            SceneUIName = input.ReadString();
            break;
          }
          case 74: {
            PathName = input.ReadString();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 90: {
            TMName = input.ReadString();
            break;
          }
          case 98: {
            Mp3Mp4Size = input.ReadString();
            break;
          }
          case 106: {
            ScrollBar = input.ReadString();
            break;
          }
          case 114: {
            GetElectric = input.ReadString();
            break;
          }
          case 122: {
            GetNetworkEnvironment = input.ReadString();
            break;
          }
          case 130: {
            GetAtState = input.ReadString();
            break;
          }
          case 138: {
            GetAndroidVersions = input.ReadString();
            break;
          }
          case 144: {
            DPHandle = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Heat = input.ReadInt32();
            break;
          }
          case 24: {
            Spo2 = input.ReadInt32();
            break;
          }
          case 32: {
            Pi = input.ReadInt32();
            break;
          }
          case 40: {
            Vec = input.ReadInt32();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            GetSerialNo = input.ReadString();
            break;
          }
          case 66: {
            SceneUIName = input.ReadString();
            break;
          }
          case 74: {
            PathName = input.ReadString();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 90: {
            TMName = input.ReadString();
            break;
          }
          case 98: {
            Mp3Mp4Size = input.ReadString();
            break;
          }
          case 106: {
            ScrollBar = input.ReadString();
            break;
          }
          case 114: {
            GetElectric = input.ReadString();
            break;
          }
          case 122: {
            GetNetworkEnvironment = input.ReadString();
            break;
          }
          case 130: {
            GetAtState = input.ReadString();
            break;
          }
          case 138: {
            GetAndroidVersions = input.ReadString();
            break;
          }
          case 144: {
            DPHandle = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
